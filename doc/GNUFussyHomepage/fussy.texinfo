\input texinfo
@set VERSION 2.0
@set ORIGINAL November, 2003
@set UPDATED 26 February, 2020
@set Fussy GNU fussy

@settitle GNU fussy Manual

@copying
This is a user manual for the GNU Fussy calculator language

Copyright @copyright{} 2020 Free Software Foundation, Inc.
@end copying

@dircategory Mathematics
@direntry
* fussy: (fussy).       A calculator language with automatic error propagation
@end direntry

@titlepage
@title GNU fussy
@subtitle A calculator language with automatic error propagation
@subtitle Fussy Version 2.0
@author Author: Sanjay Bhatnagar
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top GNU fussy

This manual is for GNU Fussy
(version: @value{VERSION}; origin date: @value{ORIGINAL}; last updated: @value{UPDATED}).
@end ifnottex

@menu
* Introduction::                            Mathematical concept.
* Usage::                                   Command-line options.
* Examples::                                Proof of correctness.
* Syntax::                                  Language syntax.
* General interactive commands::            Commands for the interactive session.
* Index::                                   Complete index.


 --- Detailed node listing ---

@detailmenu
Concepts
* Introduction::                            Mathematical concepts.
* Mathematical background::                 Calculus of error propagation.

Command-line usage
* Usage::                                   Command-line options.
* Environment variables::                   Configurable environment variables.

Examples
* Examples::                                Proof of correctness.
* Algebraic forms::                         Error propagation in algebraic expressions.
* Recursion::                               Error propagation in recursive functions.

Language syntax
* Syntax::                                  Language syntax.
* Numbers::                                 Number formats.
* Units::                                   Physical units associated with numbers/variables.
* Operators::                               Mathematical operators.
* Built-in functions and constants::        Built-in mathematical functions and constants.
* Special operators::                       Assignment operator for dependent variables.
* Expressions/Statements::                  Simple and compound statements.
* Sub-expressions::                         Statistically dependent sub-expressions.
* Variables and function/procedure names::  Variable, user-defined function names.
* Function/procedure::                      User-defined functions/procedures.
* Control statements::                      Program flow-control statements.
* Print statement::                         Print statements and format.

Commands for the interpreter
* General interactive commands::            Commands for the interactive session.
@end detailmenu
@end menu


@node Introduction
@chapter Introduction

Formal propagation of random errors in a mathematical expression
follow a precise prescription based on calculus.  This requires the
computation of the variation of the function with respect to each of
the independent variables used to construct the function.  These
variations are added in quadrature to compute the final numerical
error.  For complicated expressions, computation of all the partial
derivatives is often cumbersome and hence error prone.

The @value{Fussy}@footnote{The name reflects the original intention of
designing a language for fuzzy arithmetic.  It is also a pun on those
who (wrongly) consider error propagation as too much fuss!}  scripting
language, described here, implements an algorithm for automatic
propagation of random measurement errors in an arbitrary mathematical
expression.  It is internally implemented as a virtual machine for
efficient run time performance and can be used as an interpreter by the
user.  A simple @t{C} binding to the interpreter is also provided.
Mathematical expressions can be implemented as a collection of
as single atomic expressions (Section @ref{Expressions/Statements}),
sub-expressions (Section @ref{Sub-expressions}), or as sub-program units
(functions or procedures; Section @ref{Function/procedure}).  Errors are
correctly propagated when a complex expression is broken up into smaller
sub-expressions.  Sub-expressions are assigned to temporary variables
which can then be used to write the final expression.  These temporary
variables are not independent variables and the information about their
dependence on other constituent independent variables is preserved and
used on-the-fly in error propagation.

The scripting syntax of fussy is similar to that of the @t{C} programming
language.  It is therefore easy to use with minimal learning and can
be used in every day scientific work.  Most other related work found
in the literature is in the form of libraries for automatic
differentiation.  Only two tools appear to have used it for automatic
error propagation.  Use of these libraries and tools require
sophisticated programming and are targeted more for programmers than
for regular every day scientific use.  Also, such libraries and tools
are difficult to use for correct error propagation in expressions
composed of sub-expressions.

@menu
* Mathematical background::
@end menu

@node Mathematical background
@section Mathematical background
@cindex Mathematical background
@cindex Calculus of error propagation

If @math{\vec x} is a vector of independent experimentally measured
quantities with associated random measurement error @math{\delta \vec
x}, the formal error on a function @math{\vec x} is given by
@tex
$$  \delta f = \sqrt{\left| \vec{\nabla f} \cdot \vec{\delta x}\right|^2} = \sqrt{\sum_i {\left( {\partial f \over {\partial x_i}} 
        \delta x_i \right)}^2}$$
@end tex
Further, if @math{f(\vec x)} is a functional, e.g. @math{f(\vec x)=g(h(k(\vec
x)))}, then the partial derivative of @math{f} is given by the derivative
chain rule:
@tex
$${\partial f \over \partial x_i} = {\partial g \over \partial h} 
{\partial h \over \partial k} {\partial k \over \partial x_i}$$
@end tex
Therefore to compute @math{\delta f} one requires:

@enumerate
@item the partial derivative of the function with respect to each
independent variable (@math{\partial f / \partial x_i})
@item @math{\delta x_i} - the measurement error
@item chain rules of differential calculus for the
mathematical operators (which will use the @math{x_i}'s and @math{\partial f /
\partial x_i}'s).  
@end enumerate


The @value{Fussy} interpreter is implemented internally as a
stack-based virtual machine (VM).  The derivative chain rule is
implemented using a separate VM which maintains a stack @i{per
independent variable} to hold the intermediate partial derivatives.
At the terminal nodes of a parsing tree (e.g.  the '=' operator) the
values from these stacks are used to evaluate @math{\delta f} (the
first equation) above.  A user program written in @math{Fussy} is
compiled into the VM instruction-set, referred to as the op-codes, to
manipulate the VM stack (VMS), call built-in functions, perform basic
mathematical operations or call user-defined sub-program (functions or
procedures).  These op-codes are function calls which perform the
operation they represent (mathematical operators, built-in function
call or branching to a sub-program unit) as well as the steps required
for automatic error propagation.  Since user-defined
programs/expressions are translated into these op-codes, errors are
correctly propagated in the mathematical expression in any arbitrary
user program.

A simple @t{C} binding to the interpreter is also provided.  The user
program can be supplied to the interpreter via an in-memory string using
the function @t{calc(char,*InString, edouble &ans, FILE *InStream, FILE
*OutStream)}.  The contents of the @t{InString} are parsed and converted
to a VM instruction set.  The result of the execution of this program is
returned in @t{ans}.  The last two arguments are not used in this case.
Alternatively, if @t{InString} is set to @t{NULL} and the last two
arguments set to valid file pointers, the interpreter will take the
input from @t{InFile} and use @t{OutFile} as the output stream.  A
similar @t{C++} interface of type @t{calc(char *InString, ostream
&ResultStream, FILE *InStream, FILE *OutStream)} writes the result of
the program supplied in @t{InString} or via the file pointer
@t{InStream} to the output stream @t{ResultStream}.  @t{OutStream} in
both interfaces is used as the output file for the error messages.

@node Usage
@chapter Usage
@cindex Command-line
@cindex Usage

@menu
* Environment variables::
@end menu



@value{Fussy} can be run from the command-line with the following
options:

@verbatim

   fussy [-h|--help] [-q] [-d] [-t N] [prog1,prog2,...]

   -h or --help
      Print this help

   -q
      Run in quiet mode.  Do not print the copyright information

   -d
      Sets the debugging mode (meant for developers)

   -t N
      N is the number of Ctrl-C trials after which the interpreter
      gives up preaching good behavior and quits.  Default is 10000.

@end verbatim
Use the @t{"help"} command in interactive mode to get more help about the language syntax.

The file @t{$HOME/.fussy}, if present, is processed at the very
beginning of the start of the program.

@node Environment variables
@section Environment variables

fussy is sensitive to the following environment variables:

@enumerate
@item @t{HOME}: The path where it looks for the @t{.fussy}
configuration file
@item @t{FUSSY_IGNOREEOF}: An integer value indicating the number of
times a @t{Ctrl-D} input to the interpreter will be ignored before
quitting.  Default values is @math{10^6}.
@end enumerate

@node Examples
@chapter Examples
Following are some examples to demonstrate, as well as test the
correctness of the error propagation algorithm.

@menu
* Algebraic forms::
* Recursion::
@end menu

@node Algebraic forms
@section Algebraic forms
@cindex Examples: Algebraic forms

In the following examples, various
functions are written in different algebraic forms and the results for
the different forms is shown to be exactly same (e.g. @math{\cos(x)} vs.
@math{\sqrt{1-\sin^2(x)}}, @math{\tan(x)} vs. @math{\sin(x)/\cos(x)}).  These
examples also verify that the combination of a function and its
inverse simply returns the argument (e.g @math{\arcsin(\sin(x))=x}), as well
as functions like @math{\sinh(x)/((\exp(x)-\exp(-x))/2)} (which is really a
complicated way of writing 1!) returns a value of 1 with no error.
However, if the values of two independent variates @math{x_1} and @math{x_2} and
their corresponding errors are same, the value of expressions like
@math{\sin^2(x_1) + \cos^2(x_2)} will be 1 but the error will not be zero.
@verbatim

   Value of x         =  1.00000 +/- 0.10000
   Value of y         =  2.00000 +/- 0.20000
   Value of x1        =  1.00000 +/- 0.10000
   Value of x2        =  1.00000 +/- 0.10000

   sin(x)             =  0.84147 +/-  0.05403
   sqrt(1-sin(x)^2)   =  0.54030 +/-  0.08415
   cos(x)             =  0.54030 +/-  0.08415

   tan(x)             =  1.55741 +/-  0.34255
   sin(x)/cos(x)      =  1.55741 +/-  0.34255

   sinh(x)            =  1.17520 +/-  0.15431
   (exp(x)-exp(-x))/2 =  1.17520 +/-  0.15431

   sin(x1)*sin(x1)       =  0.70807 +/- 0.09093
   sin(x1)*sin(x2)       =  0.70807 +/- 0.06430

   /* Expressions that evaluate to just x */

   asin(sin(x))       =  1.00000 +/-  0.10000
   asinh(sinh(x))     =  1.00000 +/-  0.10000
   atanh(tanh(x))     =  1.00000 +/-  0.10000
   exp(ln(x))         =  1.00000 +/-  0.10000

   /* Complicated ways of computing 1.0! */

   sinh(x)/((exp(x)-exp(-x))/2) =  1.00000 
   x/exp(ln(x))                 =  1.00000

   /* Complicated ways of computing 1.0 with single and multiple variates! */

   sin(x1)^2+cos(x1)^2   =  1.00000 +/- 0.00000
   sin(x1)^2+cos(x2)^2   =  1.00000 +/- 0.12859

@end verbatim

@node Recursion
@section Recursion
@cindex Examples: Recursion

Following is an example of error propagation in a recursive function.
The factorial of @math{x} is written as a recursive function @math{f(x)}.  Its
derivative is given by 
@tex
$$f(x)\left[{1\over x} + {1\over x-1} + {1\over x-2} +\cdots+{1\over 2} + 1\right]$$
@end tex
The term in the parenthesis is also written
as a recursive function @math{df(x)}.  It is shown that the propagated
error in @math{f(x)} is equal to @math{f(x)df(x)\delta x}.
@verbatim

   >f(x) {if (x==1) return x; else return x*f(--x);}
   >df(x){if (x==1) return x; else return 1/x+df(--x);}
   >f(x=10pm1)
           3628800.00000 +/- 10628640.00000
   >(f(x)*df(x)*x.rms).val
           10628640.00000

@end verbatim
Similarly, the recurrence relations for the Laguerre polynomial of
order @math{n} and its derivative evaluated at @math{x} can be written
as recursive functions.
@c @tex
@c $$L_n(x) = \left\{
@c 	1~~n=0\\
@c 	1-x~~n=1\\
@c 	{\left(2n-1-x\right)L_{n-1}(x)-\left(n-1\right)L_{n-2}(x) \over n}~~n\ge2
@c 	\right. \\
@c L^\prime_n(x)  = \left(n/x\right)\left[L_n(x) - L_{n-1}(x)\right]$$
@c @end tex
These are written in @value{Fussy} as @t{l(n,x)} and @t{dl(n,x)} and it is shown that the propagated error in @math{L_n(x)} is
equal to @math{L^\prime_n(x)\delta x}.

@verbatim

   >l(n,x){
      if (n<=0) return 1;
      if (n==1) return 1-x;
      return ((2*n-1-x)*l(n-1,x)-(n-1)*l(n-2,x))/n;
    }
   >dl(n,x){return (n/x)*(l(n,x)-l(n-1,x));}
   >l(4,x=3pm1)
               1.37500 +/-    0.50000
   >(dl(4,x)*x.rms).val
           0.50000

@end verbatim

@node Syntax
@chapter Syntax

This section describes the @value{Fussy} syntax.  Statements are
interactively executed as soon as they are completed.  The virtual
code for the sub-programs (function or procedure) is held in the
memory and executed when the sub-programs are called.

@menu
* Numbers::
* Units::
* Operators::
* Built-in functions and constants::
* Special operators::
* Expressions/Statements::
* Sub-expressions::
* Variables and function/procedure names::
* Function/procedure::
* Control statements::
* Print statement::
@end menu

@node Numbers
@section Numbers
@cindex Number formats

Numbers in @value{Fussy} are represented as floating point numbers and can
be specified with or without the decimal point, or in the exponent
format.  Optionally, an error can also be associated with the numbers
via the @t{pm} directive.  E.g., @math{75.3 +/- 10.1} can be expressed as
@t{75.3pm10.1}.  Numbers can also be tagged with units (see Section @ref{Units})
or a @t{C}-styled printing format (see Section @ref{Formatting}).

@node Units
@section Units
@cindex Units with numbers/variables
   
Numerical values can be specified along with their units.  As of now,
the only units supported are degree, arcmin, arcsec, hours, minute,
and seconds.  These can be specified by appending @t{'d', ''', '"',
'h', 'm', 's'} respectively to the numeric values.  Internally, all
numeric values are always stored in the MKS system of units.  The
default units for a variable used to specify angles or time is
radians.  If the values are specified along with any of the above
mentioned units, the values are still stored internally as radians.
However while printing (see Section @ref{Print statement}), the values are
formatted automatically and printed with the appropriate units.

@node Operators
@section Operators
@cindex Mathematical operators


The normal binary operators of type @t{expr <op> expr}, where @t{expr} is any expression/variable/constant and @t{<op>} is one of
@t{ '+', '-', '/', '*'}, @t{'\^'} and @t{'**'} binary
operators perform the usual mathematical operations in addition to
error propagation.  The comparison operators @t{'<'},
@t{'>'}, @t{'='}, @t{'!='},
@t{'<='}, @t{'>='} and the logical
operators @t{||'}and @t{&&'}
have the usual meaning.  Apart from the usual operation, the @t{var=expr} assignment operator also does the error propagation in the
expression on the RHS and assigns it as the error for the variable on
the LHS.  In addition to this, the assignment operator for partial
variables (@t{pvar:=expr}) is also defined.  This does not propagate
the errors on the RHS but instead transfers all the required
information for error propagation to the variable on the LHS (see
Section @ref{Sub-expressions}).  The result of these assignment
statements is the value of the variable on the LHS.  Hence expressions
like @t{sin(x=0.1pm0.02)} are equivalent to @t{x=0.1pm0.02;sin(x)}.  The prefix and postfix operators @t{<op>var} and @t{var<op>} where @t{<op>} is either @t{'++'} or
@t{'--'} and @t{var} is any user-defined variable are also
defined.  These increment or decrement the value of the variables by
one.  The prefix and postfix operators operate on the variables before
and after the variable is further used respectively.

In addition, two operators of type @t{expr.<op>} where @t{<op>} is
either @t{val} or @t{rms} are also defined.  These operators
extract the value and the associated (propagated) error in @t{expr}
which can be any mathematical expression or a variable.

@node Built-in functions and constants
@section Built-in functions and constants
@cindex Build-in functions

The following built-in functions are available: 

@t{sin}, @t{cos}, @t{tan}, @t{asin}, @t{acos}, @t{atan}, @t{atan2}, @t{sinh}, @t{cosh}, @t{tanh}, @t{asinh}, @t{acosh}, @t{atanh}, @t{exp}, @t{ln}, @t{log}, @t{fabs}, @t{fmod}, @t{sqrt}, @t{int}.

The following functions, useful for astronomical computations are defined.  The latitude and longitude used for these computations are set in the global system variables @t{LONGITUDE} and @t{LATITUDE}.
@itemize
@item @t{time()}:  returns the current time in the @t{hms} format.
@item @t{lst()}:   returns the Local Sideral time in the @t{hms} format.
@item @t{day()}:   returns the current day.
@item @t{month()}: returns the current month.
@item @t{year()}:  returns the current year.
@item @t{mjd(),fmjd()}: returns the current MJD and fractional MJD.
@item @t{setlong(MyLongitude)}: Sets the global variables @t{LONGITUDE}
to the given value.
@item @t{setlat(MyLatitude)}: Sets the global variables @t{LATITUDE}
to the given value.
@end itemize

@subsection Built-in constants
@cindex Constants

The following useful constants are available:

@itemize
@item @t{PI}:    The value of PI
@item @t{C}:     The speed of light in meter/second
@item @t{R2D}:   Factor to convert angles in degree to radian
@item @t{A2R}:   Factor to convert angles in arcsecond to radian
@item @t{kb}:    The Boltzmann constant
@item @t{PC2M}:  Factor to convert from Parsec to meter
@item @t{PC2LY}: Factor to convert from Parsec to Lightyear
@item @t{AU2M}:  Factor to convert from Astronomical Unit to meter
@item @t{sigma}: [NOT YET USED] Threshold to use for the result of logical operators
@end itemize

@node Special operators
@section Special operators
@cindex Special operators

The fussy language defines the following special operators:

@enumerate
@item '@t{:=}': For assignment of partial results/sub-expression
               values.

               The partial assignment operator @t{:=} assigns value of
               partial results to variables. Expression like
               @t{pvar:=val} does not propagate the errors on the
               @t{val} but instead transfers all the required
               information for error propagation to the variable
               @t{pvar} (see Section
               @ref{Sub-expressions}). Expressions like
               @t{sin(x:=0.1pm0.02)} are equivalent to
               @t{x:=0.1pm0.02;sin(x);}.
@cindex Partial assignent operator

@item         '@t{pm}': For associating an error with numerical values.
	      E.g. 10 +/- 1.0 is expressed as 10pm1.
@cindex '@t{pm}' operator

@item         '@t{<expr>.rms}', '@t{<expr>.val}': For extracting the associated error 
	      and the value of the expression <expr>.  E.g. x.rms
	      is the error associated with x while x.val is the 
	      value of x.
@cindex '@t{.rms}' operator
@cindex '@t{.val}' operator


@item         '@t{<expr>%<format>}': Sets the print format of the result of the
	      expression <expr> to the printf style format <format>. 
	      E.g. x%10.5f will print the value of x as a float in a
	      10 character field with 5 places after decimal.
@cindex '@t{%FMT}' operator

@item         '@t{<var>}.': Operator to set the default print format of a variable.
	      E.g. x.=%7.2f will replace the default printf format (%10.5f)
	      by %7.2f.
@cindex '@t{<var>.} operator
@end enumerate


@node Expressions/Statements
@section Expressions/Statements
@cindex Atomic mathematical expressions

Numbers and variables can be combined with the mathematical operators
and logical operators to form an expression.  Expressions can be used
as arguments to built-in or user-defined functions (see
Section @ref{Function/procedure}).  An expression followed by a NEWLINE
prints its result on the output stream (see Section @ref{Print statement}) in
the default format (see Section @ref{Formatting}).

For the purpose of error propagation, the print statement and the
assignment operator (the @t{'='} operator but not the @t{':='}
operator; see Section @ref{Sub-expressions}) are treated as the
terminal nodes of the parsing tree which invokes the final error
propagation.

Assigning a value to a variable also creates the variable.  The type
of the value assigned to the variable determines its type (and overrides
the value or the type of a previously declared variable).  E.g.
@verbatim

   >H_0=75pm10
   >H_0
             75.00000 +/-   10.00000
   >H_0="The Hubble constant\n"
   >H_0
    The Hubble constant

@end verbatim
A semi-colon (@t{';'}) is a delimiter to separate multiple
expressions in a single line.  Statements on separate lines need not
be delimited by semi-colons (though it is not an error to do so).
Compound statements are a group of simple statements, grouped using the
curly-brace pair (@t{'@{'} and @t{'@}'}) (e.g. @t{@{a=1.5;b=2;@}}). As may be obvious, compound statements can also be nested.
The @t{'/*'} and @t{'*/'} pair can be used as comment
delimiters.  Comment delimiters however cannot be nested. 
%E.g.

@node Sub-expressions
@section Sub-expressions 
@cindex Sub-expressions
@cindex Dependent and independent variables

The special assignment operator @t{':='} is used to assign
sub-expressions to user-defined variables.  Sub-expression variables
are different from normal variables in that their propagated error is
computed on-the-fly when required, i.e.  when they are printed or are
assigned to a normal variable using the @t{'='} operator or at an
operator node of a parsing tree when used in another expression.  E.g.
@verbatim

   >x=1pm0.1
   >s:=sin(x);c:=cos(x);
   >sin(x)/cos(x) /* Compute tan(x) as sin(x)/cos(x) */
       1.55741 +/-    0.34255
   >s/c           /* Compute tan(x) using two PARTIAL_VAR */
       1.55741 +/-    0.34255
   >tan(x)        /* Direct computation of tan(x) */
       1.55741 +/-    0.34255
   >s2=s;
   >s2/c          /* Compute tan(x) with a normal variable
                     and one PARTIAL_VAR.  Error propagates 
                     differently */
       1.55741 +/-    0.26236

@end verbatim

@node Variables and function/procedure names
@section Variables and function/procedure names

Variable/function/procedure names can be of any length and must match
the regular expression @t{[a-zA-Z_]+[a-zA-Z0-9_]*}.  That is, the
names must start with an alphabet or @t{'_'} and can be followed by
one or more alpha-numeric characters or @t{'_'}.

@node Function/procedure
@section Function/procedure
@cindex User defined function and procedure
@cindex Sub-program units

Sub-programs can be written as functions or procedures.  The only
difference between functions and procedures is that functions @i{
must} return a value while procedures must @i{ not} return a value.
The type of a sub-program which returns a value using the
@t{return}~@t{<expression>} statement becomes @t{func}.  If @t{return}
is not used, or is used without an @t{expression}, the type becomes
@t{ proc}.  The type of the sub-program therefore need not be
declared.  It is an error to use a procedure in an expression or pass
a procedure as an argument to another sub-program where a function
should have been passed.

A function or procedure declaration begins with a variable name
followed by an argument list.  The argument list is enclosed by a
round bracket pair (@t{'('} and @t{')'}).  A @t{'()'} specifies
an empty argument list.  The function body is in enclosed between the
@t{'@{'} and @t{'@}'} brackets.  E.g.
@verbatim

   >/* An example of a function declaration */
   >f() { return sin(PI/2); }
   >/* An example of a procedure declaration */ 
   >p() {print "Value of f() = ",f(),"\n";}
   >f()
              1.00000
   >p() 
   Value of f() =    1.00000

@end verbatim
A sub-program can be passed as an argument to another sub-program.  An
argument corresponding to a sub-program can be specified using the
@t{func} (for a function) or @t{proc} (for a procedure) directive.
E.g.
@verbatim

   >f(x) { return sin(x); }
   >p(func fa,x) {print "The value of f(",x%5.2f,") =",fa(x),"\n";}
   >p(f,10)
   The value of f(10.00) =  -0.54402

@end verbatim
All symbols (variables, functions, procedures) used in the sub-program
code must be either global variables declared @i{before} the
sub-program declaration or must be one of the argument list.
Temporary variables, the scope of which is within the sub-program
only, can be declared using the @t{auto} directive.  E.g.
@verbatim

   >f(x) { return sin(x); }
   >p(func fa,x)
     {
       auto t;
       t=fa(x);
       print "The value of f(",x%5.2f,") =",t,"\n";
     }
   >p(f,10)
   The value of f(10.00) =  -0.54402

@end verbatim


@node Control statements
@section Control statements

The @t{if-else}, @t{while-} and @t{for-}loops constitute the
program control statements.  These loops can be broken at any stage
with the use of the @t{break} statement.  As of now, the conditions
which control the logic is evaluated ignoring the error with the
control variables.  Ultimately the goal is to provide a language
feature to specify a significance level and the conditional statements
return true if the error on the evaluated value is within the
significance level, else return false.

@subsection @t{if-else}
@cindex @t{if-else} statement

The syntax for the @t{if-else} statement is:
@verbatim

    if (condition)
       if-body-statement;

         or

    if (condition)
       if-body-statement else
       else-body-statement;

@end verbatim
The @t{if-body-statement} and the @t{else-body-statement} can be
any valid compound or simple statement.  In case of a simple
statement, the terminating semi-colon is necessary.

@subsection @t{while-loop}
@cindex @t{while-loop}

The syntax for the @t{while-loop} is:
@verbatim

    while (condition)
       body-statement

@end verbatim
The @t{ body-statement} can be either a simple or a compound
statement and in case it is a simple statement, the terminating
semi-colon defines the end of the loop.

@subsection @t{for-loop}
@cindex @t{for-loop}

The syntax for the @t{for-loop} is:
@verbatim

    for (init;condition;incr)
      body-statement

@end verbatim
where @t{init} is a comma (@t{','}) separate list of simple
statements for initializing the loop variables.  E.g. @t{init} can
be @t{i=0,j=0,k=0}. @t{condition} is a simple, single statement
while @t{incr} is a list of comma separated statement(s). The @t{body-statement} can be any valid simple or compound statement.  @t{init} statements are executed first followed by the @t{condition}
statement.  If the result of the @t{condition} statement is non-zero
(logical true), the @t{body-statements}, the @t{incr} statement(s)
and the @t{condition} statements are executed in a sequence till the
result of the @t{condition} statement is zero (logical false).
E.g. following is a valid @t{for-loop} with 3 loop-variables, only
one of which is checked in the condition:
@verbatim

    for (i=0,j=0,k=0;i<10;i=i+1,j=j+1;k=k+1) 
       print "i= ",i," j= ",j," k= ",k,"\n";

@end verbatim

@node Print statement
@section Print statement
@cindex @t{print} statement
@cindex @t{printn} statement

@value{Fussy} supports formatted printing of numbers, variables and
strings using @t{printf}-styled print-format specification.

@menu
* @t{print} and @t{printn} statements::
* Formatting::
@end menu

@node @t{print} and @t{printn} statements
@subsection The @t{print} and @t{printn} statements

The @t{print} statement takes a comma separated list of objects to
be printed.  These objects can be quoted-strings, variables,
constants, condition statements or user-defined function names.  The
list can consist of any number of objects and is terminated by a
semi-colon.  The format in which the numeric values are printed is
defined by the format modifier associated with the values (see
Section @ref{Formatting}).  All escaped-characters used in C-styled
printing have the same effect as in the output of the C-styled @t{printf} statement.

The @t{printn} statement is exactly the same as @t{print} statement
but emits a new-line character at the end.

@node Formatting
@subsection Formatting
@cindex Print formatting
@cindex @t{printf}-styled formatting
@cindex Print formatting: @t{%B} and @t{%b} operators

Values can be formatted for printing in a variety of ways.  The format
in which a variable is printed is associated with the variable and
consists of a @t{printf} styled formatting string (with extensions
for specifying the units of the numerical values as well).  E.g., if
@t{x=75pm10}, by default @t{x} will be printed using the @t{
'\%10.5f'} format.  The default print format can be modified using the
@t{'.'} operator on a variable.  E.g., one can fix the default print
format of @t{x} to @t{'%5.2f'} by @t{x.=%5.2f}.

The print format of a value can also be temporarily modified by
specifying the format along with the variable/value.  E.g. the value
of @t{x} can be printed in the exponent format as @t{print x%E}
or in the in hexadecimal format as @t{print x%x}.

An extra formatting, not available in @t{printf} formatting, is that
of printing the individual bit values using the @t{%b} format.
With this, the value is printed in binary (1 or 0) format.  @t{%B} does the same thing except that it prints a space after every 8 bits.
The value is caste into a @t{unsigned long} integer before
printing.
@verbatim

   >x=10;x%B
        00000000 00000000 00000000 00001010

@end verbatim
If the units of a value are specified, the print format is also
appropriately modified.  If a variable has units of time or angle, its
print format is automatically set to @t{%hms} or @t{%dms}
and are printed in the @t{XXhXXmXX.XXs} and @t{XXdXX'XX.XX"} styles respectively.
@c Here is a numbered list.

@c @enumerate
@c @item
@c This is the first item.

@c @item
@c This is the second item.
@c @end enumerate


@node General interactive commands
@chapter General interactive commands
@cindex General interactive commands

Following are some commands useful in an interactive session:
@menu
* Commands for the Virtual Machine (VM)::
@end menu

@itemize
@item @t{quit/bye}: The only two ways to quit from the interpreter.
              Politer (more civlized) of the two commands is more 
              recommended!
              Typing @t{Ctrl-D} will exit the interpreter
              after number of trials given by the environment variable
              @t{FUSSY_INGNOREEOF} (see Section @ref{Environment variables}) and typing @t{Ctrl-C} will attempt to teach a
              thing or two about life!
@item @t{setfmt}: Set the system parameter 'fmt' used as the default format for printing numbers.
@item @t{warranty}: Prints the warranty information.
@end itemize

@node Commands for the Virtual Machine (VM)
@section Commands for the Virtual Machine (VM)
@cindex Commands for the Virtual Machine (VM)
@itemize
@item @t{showvm}: Prints the resident VM program as op-codes.
@item @t{showsym}: Prints the symbol table of variables.
@item @t{showcsym}: Prints the symbol table of constants.
@item @t{showid}: Prints the list of allocated IDs.
@end itemize

@node Index
@unnumbered Index

@printindex cp

@bye
